{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('access_token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor for error handling\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Auth API\nexport const authAPI = {\n  register: userData => api.post('/api/auth/register', userData),\n  login: credentials => api.post('/api/auth/login', credentials),\n  getProfile: () => api.get('/api/auth/profile'),\n  updateProfile: userData => api.put('/api/auth/profile', userData),\n  changePassword: passwordData => api.post('/api/auth/change-password', passwordData)\n};\n\n// Soil API\nexport const soilAPI = {\n  getSoilData: (lat, lng) => api.get(`/api/soil/${lat}/${lng}`),\n  getFarmSoilData: () => api.get('/api/soil/farms'),\n  analyzeSoil: soilData => api.post('/api/soil/analyze', soilData)\n};\n\n// Weather API\nexport const weatherAPI = {\n  getWeather: location => api.get(`/api/weather/${location}`),\n  getForecast: (location, days = 7) => api.get(`/api/weather/forecast/${location}?days=${days}`),\n  getAlerts: location => api.get(`/api/weather/alerts/${location}`),\n  getAgriculturalConditions: location => api.get(`/api/weather/agricultural-conditions/${location}`)\n};\n\n// Market API\nexport const marketAPI = {\n  getPrices: (params = {}) => api.get('/api/market/prices', {\n    params\n  }),\n  getCropPrice: crop => api.get(`/api/market/prices/${crop}`),\n  getTrends: () => api.get('/api/market/trends'),\n  getRecommendations: data => api.post('/api/market/recommendations', data)\n};\n\n// Recommendations API\nexport const recommendationsAPI = {\n  getCropRecommendations: data => api.post('/api/recommend/crops', data),\n  getHistory: (page = 1, perPage = 10) => api.get(`/api/recommend/history?page=${page}&per_page=${perPage}`),\n  optimizeRecommendations: data => api.post('/api/recommend/optimize', data)\n};\n\n// Disease Detection API\nexport const diseaseAPI = {\n  detectDisease: data => api.post('/api/disease/detect', data),\n  detectDiseaseBatch: data => api.post('/api/disease/detect-batch', data),\n  getCropDiseases: cropType => api.get(`/api/disease/diseases/${cropType}`),\n  getPreventionGuide: () => api.get('/api/disease/prevention-guide')\n};\n\n// Translation API\nexport const translationAPI = {\n  translate: data => api.post('/api/translate/translate', data),\n  translateBatch: data => api.post('/api/translate/translate-batch', data),\n  getLanguages: () => api.get('/api/translate/languages'),\n  detectLanguage: data => api.post('/api/translate/detect-language', data),\n  getAgriculturalTerms: (language = 'en') => api.get(`/api/translate/agricultural-terms?language=${language}`),\n  translateRecommendations: data => api.post('/api/translate/translate-recommendations', data)\n};\n\n// Voice API\nexport const voiceAPI = {\n  processQuery: data => api.post('/api/voice/query', data),\n  processBatchQuery: data => api.post('/api/voice/query-batch', data),\n  getIntents: () => api.get('/api/voice/intents'),\n  startConversation: data => api.post('/api/voice/conversation', data),\n  continueConversation: (sessionId, data) => api.post(`/api/voice/conversation/${sessionId}`, data)\n};\n\n// System API\nexport const systemAPI = {\n  healthCheck: () => api.get('/api/health')\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authAPI","register","userData","post","login","credentials","getProfile","get","updateProfile","put","changePassword","passwordData","soilAPI","getSoilData","lat","lng","getFarmSoilData","analyzeSoil","soilData","weatherAPI","getWeather","getForecast","days","getAlerts","getAgriculturalConditions","marketAPI","getPrices","params","getCropPrice","crop","getTrends","getRecommendations","data","recommendationsAPI","getCropRecommendations","getHistory","page","perPage","optimizeRecommendations","diseaseAPI","detectDisease","detectDiseaseBatch","getCropDiseases","cropType","getPreventionGuide","translationAPI","translate","translateBatch","getLanguages","detectLanguage","getAgriculturalTerms","language","translateRecommendations","voiceAPI","processQuery","processBatchQuery","getIntents","startConversation","continueConversation","sessionId","systemAPI","healthCheck"],"sources":["D:/deep ai farm/AI-crop-recommendation/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\n// Create axios instance\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor to add auth token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('access_token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor for error handling\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      localStorage.removeItem('access_token');\r\n      localStorage.removeItem('user');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Auth API\r\nexport const authAPI = {\r\n  register: (userData) => api.post('/api/auth/register', userData),\r\n  login: (credentials) => api.post('/api/auth/login', credentials),\r\n  getProfile: () => api.get('/api/auth/profile'),\r\n  updateProfile: (userData) => api.put('/api/auth/profile', userData),\r\n  changePassword: (passwordData) => api.post('/api/auth/change-password', passwordData),\r\n};\r\n\r\n// Soil API\r\nexport const soilAPI = {\r\n  getSoilData: (lat, lng) => api.get(`/api/soil/${lat}/${lng}`),\r\n  getFarmSoilData: () => api.get('/api/soil/farms'),\r\n  analyzeSoil: (soilData) => api.post('/api/soil/analyze', soilData),\r\n};\r\n\r\n// Weather API\r\nexport const weatherAPI = {\r\n  getWeather: (location) => api.get(`/api/weather/${location}`),\r\n  getForecast: (location, days = 7) => api.get(`/api/weather/forecast/${location}?days=${days}`),\r\n  getAlerts: (location) => api.get(`/api/weather/alerts/${location}`),\r\n  getAgriculturalConditions: (location) => api.get(`/api/weather/agricultural-conditions/${location}`),\r\n};\r\n\r\n// Market API\r\nexport const marketAPI = {\r\n  getPrices: (params = {}) => api.get('/api/market/prices', { params }),\r\n  getCropPrice: (crop) => api.get(`/api/market/prices/${crop}`),\r\n  getTrends: () => api.get('/api/market/trends'),\r\n  getRecommendations: (data) => api.post('/api/market/recommendations', data),\r\n};\r\n\r\n// Recommendations API\r\nexport const recommendationsAPI = {\r\n  getCropRecommendations: (data) => api.post('/api/recommend/crops', data),\r\n  getHistory: (page = 1, perPage = 10) => api.get(`/api/recommend/history?page=${page}&per_page=${perPage}`),\r\n  optimizeRecommendations: (data) => api.post('/api/recommend/optimize', data),\r\n};\r\n\r\n// Disease Detection API\r\nexport const diseaseAPI = {\r\n  detectDisease: (data) => api.post('/api/disease/detect', data),\r\n  detectDiseaseBatch: (data) => api.post('/api/disease/detect-batch', data),\r\n  getCropDiseases: (cropType) => api.get(`/api/disease/diseases/${cropType}`),\r\n  getPreventionGuide: () => api.get('/api/disease/prevention-guide'),\r\n};\r\n\r\n// Translation API\r\nexport const translationAPI = {\r\n  translate: (data) => api.post('/api/translate/translate', data),\r\n  translateBatch: (data) => api.post('/api/translate/translate-batch', data),\r\n  getLanguages: () => api.get('/api/translate/languages'),\r\n  detectLanguage: (data) => api.post('/api/translate/detect-language', data),\r\n  getAgriculturalTerms: (language = 'en') => api.get(`/api/translate/agricultural-terms?language=${language}`),\r\n  translateRecommendations: (data) => api.post('/api/translate/translate-recommendations', data),\r\n};\r\n\r\n// Voice API\r\nexport const voiceAPI = {\r\n  processQuery: (data) => api.post('/api/voice/query', data),\r\n  processBatchQuery: (data) => api.post('/api/voice/query-batch', data),\r\n  getIntents: () => api.get('/api/voice/intents'),\r\n  startConversation: (data) => api.post('/api/voice/conversation', data),\r\n  continueConversation: (sessionId, data) => api.post(`/api/voice/conversation/${sessionId}`, data),\r\n};\r\n\r\n// System API\r\nexport const systemAPI = {\r\n  healthCheck: () => api.get('/api/health'),\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}