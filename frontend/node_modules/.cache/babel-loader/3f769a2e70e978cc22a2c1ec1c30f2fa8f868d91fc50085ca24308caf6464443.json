{"ast":null,"code":"import axios from'axios';const API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:5000';// Create axios instance\nconst api=axios.create({baseURL:API_BASE_URL,headers:{'Content-Type':'application/json'}});// Request interceptor to add auth token\napi.interceptors.request.use(config=>{const token=localStorage.getItem('access_token');if(token){config.headers.Authorization=\"Bearer \".concat(token);}return config;},error=>{return Promise.reject(error);});// Response interceptor for error handling\napi.interceptors.response.use(response=>response,error=>{var _error$response;if(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401){localStorage.removeItem('access_token');localStorage.removeItem('user');window.location.href='/login';}return Promise.reject(error);});// Auth API\nexport const authAPI={register:userData=>api.post('/api/auth/register',userData),login:credentials=>api.post('/api/auth/login',credentials),getProfile:()=>api.get('/api/auth/profile'),updateProfile:userData=>api.put('/api/auth/profile',userData),changePassword:passwordData=>api.post('/api/auth/change-password',passwordData)};// Soil API\nexport const soilAPI={getSoilData:(lat,lng)=>api.get(\"/api/soil/\".concat(lat,\"/\").concat(lng)),getFarmSoilData:()=>api.get('/api/soil/farms'),analyzeSoil:soilData=>api.post('/api/soil/analyze',soilData)};// Weather API\nexport const weatherAPI={getWeather:location=>api.get(\"/api/weather/\".concat(location)),getForecast:function(location){let days=arguments.length>1&&arguments[1]!==undefined?arguments[1]:7;return api.get(\"/api/weather/forecast/\".concat(location,\"?days=\").concat(days));},getAlerts:location=>api.get(\"/api/weather/alerts/\".concat(location)),getAgriculturalConditions:location=>api.get(\"/api/weather/agricultural-conditions/\".concat(location))};// Market API\nexport const marketAPI={getPrices:function(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};return api.get('/api/market/prices',{params});},getCropPrice:crop=>api.get(\"/api/market/prices/\".concat(crop)),getTrends:()=>api.get('/api/market/trends'),getRecommendations:data=>api.post('/api/market/recommendations',data)};// Recommendations API\nexport const recommendationsAPI={getCropRecommendations:data=>api.post('/api/recommend/crops',data),getHistory:function(){let page=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;let perPage=arguments.length>1&&arguments[1]!==undefined?arguments[1]:10;return api.get(\"/api/recommend/history?page=\".concat(page,\"&per_page=\").concat(perPage));},optimizeRecommendations:data=>api.post('/api/recommend/optimize',data)};// Disease Detection API\nexport const diseaseAPI={detectDisease:data=>api.post('/api/disease/detect',data),detectDiseaseBatch:data=>api.post('/api/disease/detect-batch',data),getCropDiseases:cropType=>api.get(\"/api/disease/diseases/\".concat(cropType)),getPreventionGuide:()=>api.get('/api/disease/prevention-guide')};// Translation API\nexport const translationAPI={translate:data=>api.post('/api/translate/translate',data),translateBatch:data=>api.post('/api/translate/translate-batch',data),getLanguages:()=>api.get('/api/translate/languages'),detectLanguage:data=>api.post('/api/translate/detect-language',data),getAgriculturalTerms:function(){let language=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'en';return api.get(\"/api/translate/agricultural-terms?language=\".concat(language));},translateRecommendations:data=>api.post('/api/translate/translate-recommendations',data)};// Voice API\nexport const voiceAPI={processQuery:data=>api.post('/api/voice/query',data),processBatchQuery:data=>api.post('/api/voice/query-batch',data),getIntents:()=>api.get('/api/voice/intents'),startConversation:data=>api.post('/api/voice/conversation',data),continueConversation:(sessionId,data)=>api.post(\"/api/voice/conversation/\".concat(sessionId),data)};// System API\nexport const systemAPI={healthCheck:()=>api.get('/api/health')};export default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","concat","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authAPI","register","userData","post","login","credentials","getProfile","get","updateProfile","put","changePassword","passwordData","soilAPI","getSoilData","lat","lng","getFarmSoilData","analyzeSoil","soilData","weatherAPI","getWeather","getForecast","days","arguments","length","undefined","getAlerts","getAgriculturalConditions","marketAPI","getPrices","params","getCropPrice","crop","getTrends","getRecommendations","data","recommendationsAPI","getCropRecommendations","getHistory","page","perPage","optimizeRecommendations","diseaseAPI","detectDisease","detectDiseaseBatch","getCropDiseases","cropType","getPreventionGuide","translationAPI","translate","translateBatch","getLanguages","detectLanguage","getAgriculturalTerms","language","translateRecommendations","voiceAPI","processQuery","processBatchQuery","getIntents","startConversation","continueConversation","sessionId","systemAPI","healthCheck"],"sources":["D:/deep ai farm/AI-crop-recommendation/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\n// Create axios instance\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor to add auth token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('access_token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor for error handling\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      localStorage.removeItem('access_token');\r\n      localStorage.removeItem('user');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Auth API\r\nexport const authAPI = {\r\n  register: (userData) => api.post('/api/auth/register', userData),\r\n  login: (credentials) => api.post('/api/auth/login', credentials),\r\n  getProfile: () => api.get('/api/auth/profile'),\r\n  updateProfile: (userData) => api.put('/api/auth/profile', userData),\r\n  changePassword: (passwordData) => api.post('/api/auth/change-password', passwordData),\r\n};\r\n\r\n// Soil API\r\nexport const soilAPI = {\r\n  getSoilData: (lat, lng) => api.get(`/api/soil/${lat}/${lng}`),\r\n  getFarmSoilData: () => api.get('/api/soil/farms'),\r\n  analyzeSoil: (soilData) => api.post('/api/soil/analyze', soilData),\r\n};\r\n\r\n// Weather API\r\nexport const weatherAPI = {\r\n  getWeather: (location) => api.get(`/api/weather/${location}`),\r\n  getForecast: (location, days = 7) => api.get(`/api/weather/forecast/${location}?days=${days}`),\r\n  getAlerts: (location) => api.get(`/api/weather/alerts/${location}`),\r\n  getAgriculturalConditions: (location) => api.get(`/api/weather/agricultural-conditions/${location}`),\r\n};\r\n\r\n// Market API\r\nexport const marketAPI = {\r\n  getPrices: (params = {}) => api.get('/api/market/prices', { params }),\r\n  getCropPrice: (crop) => api.get(`/api/market/prices/${crop}`),\r\n  getTrends: () => api.get('/api/market/trends'),\r\n  getRecommendations: (data) => api.post('/api/market/recommendations', data),\r\n};\r\n\r\n// Recommendations API\r\nexport const recommendationsAPI = {\r\n  getCropRecommendations: (data) => api.post('/api/recommend/crops', data),\r\n  getHistory: (page = 1, perPage = 10) => api.get(`/api/recommend/history?page=${page}&per_page=${perPage}`),\r\n  optimizeRecommendations: (data) => api.post('/api/recommend/optimize', data),\r\n};\r\n\r\n// Disease Detection API\r\nexport const diseaseAPI = {\r\n  detectDisease: (data) => api.post('/api/disease/detect', data),\r\n  detectDiseaseBatch: (data) => api.post('/api/disease/detect-batch', data),\r\n  getCropDiseases: (cropType) => api.get(`/api/disease/diseases/${cropType}`),\r\n  getPreventionGuide: () => api.get('/api/disease/prevention-guide'),\r\n};\r\n\r\n// Translation API\r\nexport const translationAPI = {\r\n  translate: (data) => api.post('/api/translate/translate', data),\r\n  translateBatch: (data) => api.post('/api/translate/translate-batch', data),\r\n  getLanguages: () => api.get('/api/translate/languages'),\r\n  detectLanguage: (data) => api.post('/api/translate/detect-language', data),\r\n  getAgriculturalTerms: (language = 'en') => api.get(`/api/translate/agricultural-terms?language=${language}`),\r\n  translateRecommendations: (data) => api.post('/api/translate/translate-recommendations', data),\r\n};\r\n\r\n// Voice API\r\nexport const voiceAPI = {\r\n  processQuery: (data) => api.post('/api/voice/query', data),\r\n  processBatchQuery: (data) => api.post('/api/voice/query-batch', data),\r\n  getIntents: () => api.get('/api/voice/intents'),\r\n  startConversation: (data) => api.post('/api/voice/conversation', data),\r\n  continueConversation: (sessionId, data) => api.post(`/api/voice/conversation/${sessionId}`, data),\r\n};\r\n\r\n// System API\r\nexport const systemAPI = {\r\n  healthCheck: () => api.get('/api/health'),\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}